[[contracts]]
code = '''
pragma solidity ^0.6.0;
contract EtherStore {
    mapping(address => uint) public balances;

    function deposit() public payable {
        balances[msg.sender] += msg.value;
    }

    function withdraw() public {
        uint bal = balances[msg.sender];
        require(bal > 0);        
        require(msg.sender.send(bal), "Failed to send Ether");
        balances[msg.sender] = 0;
    }

    // Helper function to check the balance of this contract
    function getBalance() public view returns (uint) {
        return address(this).balance;
    }
}
'''
[[contracts.issues]]
category = "Reentrancy"
location = "EtherStore.withdraw()"
description = "The contract allows users to withdraw their balance multiple times before the balance is updated."
impact = "High"

[[contracts]]
code = '''
pragma solidity ^0.6.0;
contract TimeLock {
    mapping(address => uint) public balances;
    mapping(address => uint) public lockTime;

    function deposit() external payable {
        balances[msg.sender] += msg.value;
        lockTime[msg.sender] = block.timestamp + 1 weeks;
    }

    function increaseLockTime(uint _secondsToIncrease) public {
        lockTime[msg.sender] += _secondsToIncrease;
    }

    function withdraw() public {
        require(balances[msg.sender] > 0, "Insufficient funds");
        require(block.timestamp > lockTime[msg.sender], "Lock time not expired");

        uint amount = balances[msg.sender];
        balances[msg.sender] = 0;

        require(msg.sender.send(amount), "Failed to send Ether");
    }
}
'''
[[contracts.issues]]
category = "Arithmetic Overflow"
location = "TimeLock.increaseLockTime()"
description = "The lock time can be easily overflowed by a malicious user which will allow them to withdraw funds earlier than expected."
impact = "High"

[[contracts]]
code = '''
pragma solidity ^0.6.0;
contract EtherGame {
    uint public targetAmount = 7 ether;
    address public winner;

    function deposit() public payable {
        require(msg.value == 1 ether, "You can only send 1 Ether");

        uint balance = address(this).balance;
        require(balance <= targetAmount, "Game is over");

        if (balance == targetAmount) {
            winner = msg.sender;
        }
    }

    function claimReward() public {
        require(msg.sender == winner, "Not winner");
        require(msg.sender.send(address(this).balance), "Failed to send Ether");
    }
}
'''
[[contracts.issues]]
category = "Denial of Service"
location = "EtherGame"
description = "Malicious users can force send ether to contract to make it reach more than the target amount. This will prevent the game from ending and no one will be able to claim the reward."
impact = "High"

[[contracts]]
code = '''
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract UserAuthentication {
    struct User {
        bool isRegistered;
        bytes32 passwordHash;
    }

    mapping(address => User) private users;

    // Event to be emitted when a new user is added
    event UserAdded(address user);

    // Add a new user with a hashed password
    function addUser(address _userAddress, bytes32 _hashedPassword) public {
        require(!users[_userAddress].isRegistered, "User already registered.");
        users[_userAddress] = User(true, _hashedPassword);
        emit UserAdded(_userAddress);
    }

    // Authenticate a user with their password hash
    function authenticate(address _userAddress, bytes32 _hashedPassword) public view returns (bool) {
        require(users[_userAddress].isRegistered, "User not registered.");
        return users[_userAddress].passwordHash == _hashedPassword;
    }

    // Helper function to hash the password
    function hashPassword(string memory _password) public pure returns (bytes32) {
        return keccak256(abi.encodePacked(_password));
    }
}
'''
[[contracts.issues]]
category = "Private Information"
location = "Vault"
description = "The contract stores sensitive data in the contract storage. even though the data is private, it can be easily accessed by anyone. by inspecting the contract storage slots."
impact = "High"

[[contracts]]
code = '''
pragma solidity ^0.6.0;
contract FindThisHash {
    bytes32 public constant hash =
        0x564ccaf7594d66b1eaaea24fe01f0585bf52ee70852af4eac0cc4b04711cd0e2;

    constructor() payable {}

    function solve(string memory solution) public {
        require(hash == keccak256(abi.encodePacked(solution)), "Incorrect answer");
        require(msg.sender.send(10 ether), "Failed to send Ether");
    }
}
'''
[[contracts.issues]]
category = "Front Running"
location = "FindThisHash.solve()"
description = "The contract is vulnerable to front-running attack. A malicious user can monitor the contract for transactions and submit a transaction with a higher gas price to claim the reward."
impact = "Medium"

[[contracts]]
code = '''
pragma solidity ^0.8.20;

import "github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v4.5/contracts/utils/cryptography/ECDSA.sol";

contract MultiSigWallet {
    using ECDSA for bytes32;

    address[2] public owners;

    constructor(address[2] memory _owners) payable {
        owners = _owners;
    }

    function deposit() external payable {}

    function transfer(address _to, uint _amount, bytes[2] memory _sigs) external {
        bytes32 txHash = getTxHash(_to, _amount);
        require(_checkSigs(_sigs, txHash), "invalid sig");

        (bool sent, ) = _to.call{value: _amount}("");
        require(sent, "Failed to send Ether");
    }

    function getTxHash(address _to, uint _amount) public view returns (bytes32) {
        return keccak256(abi.encodePacked(_to, _amount));
    }

    function _checkSigs(
        bytes[2] memory _sigs,
        bytes32 _txHash
    ) private view returns (bool) {
        bytes32 ethSignedHash = _txHash.toEthSignedMessageHash();

        for (uint i = 0; i < _sigs.length; i++) {
            address signer = ethSignedHash.recover(_sigs[i]);
            bool valid = signer == owners[i];

            if (!valid) {
                return false;
            }
        }

        return true;
    }
}
'''
[[contracts.issues]]
category = "Signature Replay"
location = "MultiSigWallet.transfer()"
description = "The contract is vulnerable to replay attack. A malicious user can replay a transaction to drain the contract."
impact = "Medium"

[[contracts]]
code = '''
pragma solidity ^0.8.20;

contract Target {
    function isContract(address account) public view returns (bool) {
        uint size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    bool public pwned = false;

    function protected() external {
        require(!isContract(msg.sender), "no contract allowed");
        pwned = true;
    }
}
'''
[[contracts.issues]]
category = "Zero Size Check"
location = "Target.isContract()"
description = "The contract uses extcodesize to check if the address is a contract. This method is not reliable as it will return false for contracts in construction."
impact = "Medium"

[[contracts]]
code = '''
pragma solidity ^0.6.0;
contract Wallet {
    address public owner;

    constructor() payable {
        owner = msg.sender;
    }

    function transfer(address payable _to, uint _amount) public {
        require(tx.origin == owner, "Not owner");
        require(_to.send(amount), "Failed to send Ether");
    }
}
'''
[[contracts.issues]]
category = "Use of tx.origin"
location = "Wallet.transfer()"
description = "The contract uses tx.origin to check if the transaction is initiated by the owner. This method is not reliable as it will return true for transactions that are initiated by a contract."
impact = "Medium"

[[contracts]]
code = '''
pragma solidity ^0.8.0;

contract SecureVault {
    mapping(address => uint256) private balances;
    
    function deposit() external payable {
        balances[msg.sender] += msg.value;
    }
    
    function withdraw(uint256 amount) external {
        if (balances[msg.sender] >= amount) {
            balances[msg.sender] -= amount;
            require(msg.sender.send(amount), "Withdrawal failed");
        }
    }
    
    function transfer(address payable recipient, uint256 amount) external {
        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Transfer failed");
    }
    
    function destroy() external {
        selfdestruct(payable(msg.sender));
    }
    
    receive() external payable {
        balances[msg.sender] += msg.value;
    }
    
    function generateRandomNumber() external view returns (uint256) {
        return uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty)));
    }
    
    function withdrawBalance() external {
        require(balances[msg.sender] > 0, "No balance to withdraw");
        uint256 amount = balances[msg.sender];
        balances[msg.sender] = 0;
        require(msg.sender.send(amount), "Withdrawal failed");
    }
}
'''
[[contracts.issues]]
category = "Lack of Input Validation"
location = "VulnerableContract.deposit()"
description = "The contract does not validate the input value before adding it to the user balance. This will allow a malicious user to overflow their balance."
impact = "High"
[[contracts.issues]]
category = "Reentrancy"
location = "VulnerableContract.withdraw()"
description = "The contract allows users to withdraw their balance multiple times before the balance is updated."
impact = "High"
[[contracts.issues]]
category = "Unchecked External Call"
location = "VulnerableContract.transfer()"
description = "The contract uses call to transfer ether to the user. This method is not reliable as it will fail if the user is a contract with a fallback function that consumes more than 2300 gas."
impact = "Medium"
[[contracts.issues]]
category = "Use of Deprecated Solidity Functions"
location = "VulnerableContract.destroy()"
description = "The contract uses selfdestruct to destroy the contract and send the remaining ether to the owner. This method is deprecated and should be avoided."
impact = "Low"
[[contracts.issues]]
category = "Unprotected Receive Function"
location = "VulnerableContract.receive()"
description = "The contract does not have a receive function to reject ether sent to the contract."
impact = "Low"
[[contracts.issues]]
category = "Insecure Randomness"
location = "VulnerableContract.generateRandomNumber()"
description = "The contract uses block.timestamp and block.difficulty to generate a random number. This method is not secure as the miner can manipulate the block difficulty."
impact = "Low"
[[contracts.issues]]
category = "Unprotected Ether Withdrawal"
location = "VulnerableContract.withdrawBalance()"
description = "The contract allows users to withdraw their balance without checking if the user has enough balance."
impact = "Low"
